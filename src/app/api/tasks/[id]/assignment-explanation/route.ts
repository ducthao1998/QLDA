import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'
import { buildExperienceMatrix, getExperienceScore } from '@/algorithm/experience-matrix'

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  const supabase = await createClient()

  try {
    const taskId = (await params).id
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('user_id')

    if (!userId) {
      return NextResponse.json(
        { error: 'C·∫ßn cung c·∫•p user_id' },
        { status: 400 }
      )
    }

    // L·∫•y th√¥ng tin task v√† skills y√™u c·∫ßu
    const { data: taskData } = await supabase
      .from('tasks')
      .select(`
        id,
        name,
        template_id,
        project_id,
        task_skills(skill_id, skills(name))
      `)
      .eq('id', taskId)
      .single()

    if (!taskData) {
      return NextResponse.json(
        { error: 'Kh√¥ng t√¨m th·∫•y task' },
        { status: 404 }
      )
    }

    // L·∫•y th√¥ng tin user
    const { data: userData } = await supabase
      .from('users')
      .select('id, full_name, position, org_unit')
      .eq('id', userId)
      .single()

    if (!userData) {
      return NextResponse.json(
        { error: 'Kh√¥ng t√¨m th·∫•y user' },
        { status: 404 }
      )
    }

    // L·∫•y skills y√™u c·∫ßu t·ª´ template v√† task_skills
    let requiredSkills: number[] = []
    const skillNames: string[] = []

    // T·ª´ template
    if (taskData.template_id) {
      const { data: templateData } = await supabase
        .from('task_templates')
        .select('required_skill_id, skills(name)')
        .eq('id', taskData.template_id)
        .single()

      if (templateData?.required_skill_id) {
        requiredSkills.push(templateData.required_skill_id)
        skillNames.push((templateData as any).skills?.name || 'Unknown Skill')
      }
    }

    // T·ª´ task_skills
    if (taskData.task_skills && taskData.task_skills.length > 0) {
      const taskSkills = taskData.task_skills
        .map((ts: any) => ({
          id: ts.skill_id,
          name: ts.skills?.name || 'Unknown Skill'
        }))
        .filter((skill: any) => skill.id !== null)
      
      requiredSkills = [...new Set([...requiredSkills, ...taskSkills.map(s => s.id)])]
      skillNames.push(...taskSkills.map(s => s.name))
    }

    // T√≠nh workload hi·ªán t·∫°i c·ªßa user (t·∫•t c·∫£ d·ª± √°n)
    const { data: currentWorkloads } = await supabase
      .from('task_raci')
      .select(`
        user_id,
        tasks!inner(
          id,
          status,
          project_id,
          projects!inner(
            id,
            name,
            status
          )
        )
      `)
      .eq('role', 'R')
      .eq('user_id', userId)
      .in('tasks.status', ['todo', 'in_progress', 'review', 'blocked'])
      .in('tasks.projects.status', ['active', 'planning'])

    const currentWorkload = currentWorkloads?.length || 0
    const projectsCount = new Set(
      currentWorkloads?.map(w => (w.tasks as any).project_id) || []
    ).size

    // X√¢y d·ª±ng experience matrix
    const experienceMatrix = await buildExperienceMatrix([userId], requiredSkills)

    // T√≠nh ƒëi·ªÉm cho t·ª´ng skill
    const skillExperiences = requiredSkills.map((skillId, index) => {
      const score = getExperienceScore(experienceMatrix, userId, skillId)
      return {
        skill_id: skillId,
        skill_name: skillNames[index] || 'Unknown Skill',
        experience_score: score,
        level: score > 0.8 ? 'Chuy√™n gia' : 
               score > 0.6 ? 'Th√†nh th·∫°o' :
               score > 0.3 ? 'C√≥ kinh nghi·ªám' :
               score > 0 ? 'C∆° b·∫£n' : 'Ch∆∞a c√≥ kinh nghi·ªám'
      }
    })

    // T√≠nh c√°c ƒëi·ªÉm th√†nh ph·∫ßn
    const avgExperience = skillExperiences.length > 0 
      ? skillExperiences.reduce((sum, skill) => sum + skill.experience_score, 0) / skillExperiences.length
      : 0

    const experienceBonus = avgExperience > 0.7 ? 0.2 : avgExperience > 0.5 ? 0.1 : 0
    const fieldExperienceScore = Math.min(1, avgExperience + experienceBonus)

    // Workload score
    const maxWorkload = 3
    const workloadRatio = currentWorkload / maxWorkload
    let workloadScore = 0
    let workloadLevel = ''

    if (workloadRatio === 0) {
      workloadScore = 1.0
      workloadLevel = 'Ho√†n to√†n r·∫£nh'
    } else if (workloadRatio <= 0.33) {
      workloadScore = 0.8
      workloadLevel = '√çt vi·ªác'
    } else if (workloadRatio <= 0.66) {
      workloadScore = 0.5
      workloadLevel = 'V·ª´a ph·∫£i'
    } else {
      workloadScore = 0.2
      workloadLevel = 'B·∫≠n'
    }

    // Skill coverage
    const skillCoverage = skillExperiences.filter(s => s.experience_score > 0).length
    const skillCoverageScore = requiredSkills.length > 0 
      ? skillCoverage / requiredSkills.length
      : 1

    // Specialization
    const hasHighExpertise = skillExperiences.some(s => s.experience_score > 0.8)
    const specializationScore = hasHighExpertise ? 1 : 0.5

    // T·ªïng ƒëi·ªÉm
    const totalScore = (
      fieldExperienceScore * 0.5 +
      workloadScore * 0.35 +
      skillCoverageScore * 0.1 +
      specializationScore * 0.05
    )

    // T·∫°o gi·∫£i th√≠ch c√≥ √Ω nghƒ©a
    const reasons = []
    
    // L√Ω do ch√≠nh - t·∫°i sao ch·ªçn ng∆∞·ªùi n√†y
    if (totalScore > 0.7) {
      reasons.push(`üéØ L√† ·ª©ng vi√™n t·ªët nh·∫•t v·ªõi t·ªïng ƒëi·ªÉm ${Math.round(totalScore * 100)}%`)
    } else if (totalScore > 0.5) {
      reasons.push(`‚úÖ L√† l·ª±a ch·ªçn ph√π h·ª£p v·ªõi t·ªïng ƒëi·ªÉm ${Math.round(totalScore * 100)}%`)
    } else {
      reasons.push(`‚ö†Ô∏è ƒê∆∞·ª£c ch·ªçn do thi·∫øu l·ª±a ch·ªçn t·ªët h∆°n (${Math.round(totalScore * 100)}%)`)
    }

    // ƒêi·ªÉm m·∫°nh c·ª• th·ªÉ
    if (fieldExperienceScore > 0.6) {
      reasons.push(`üìö Kinh nghi·ªám cao trong lƒ©nh v·ª±c (${Math.round(fieldExperienceScore * 100)}%)`)
    } else if (fieldExperienceScore > 0.3) {
      reasons.push(`üìñ C√≥ kinh nghi·ªám c∆° b·∫£n trong lƒ©nh v·ª±c (${Math.round(fieldExperienceScore * 100)}%)`)
    }

    if (workloadScore > 0.7) {
      reasons.push(`‚öñÔ∏è Kh·∫£ nƒÉng s·∫µn s√†ng cao (${workloadLevel})`)
    } else if (workloadScore > 0.4) {
      reasons.push(`‚öñÔ∏è C√≥ th·ªÉ ƒë·∫£m nh·∫≠n th√™m (${workloadLevel})`)
    }

    if (skillCoverage === requiredSkills.length && requiredSkills.length > 0) {
      reasons.push(`‚úÖ ƒê√°p ·ª©ng ƒë·∫ßy ƒë·ªß ${requiredSkills.length} k·ªπ nƒÉng y√™u c·∫ßu`)
    } else if (skillCoverage > 0) {
      reasons.push(`‚ö†Ô∏è C√≥ ${skillCoverage}/${requiredSkills.length} k·ªπ nƒÉng c·∫ßn thi·∫øt`)
    }

    if (hasHighExpertise) {
      reasons.push(`üåü C√≥ chuy√™n m√¥n s√¢u trong m·ªôt s·ªë k·ªπ nƒÉng`)
    }

    // Th√¥ng tin b·ªï sung h·ªØu √≠ch
    if (projectsCount > 1) {
      reasons.push(`üè¢ ƒêa d·∫°ng kinh nghi·ªám t·ª´ ${projectsCount} d·ª± √°n`)
    }

    // T·∫°o recommendations cho t·∫•t c·∫£ RACI roles
    const raciRecommendations = {
      R: {
        score: totalScore,
        recommendation: totalScore > 0.7 ? 'R·∫•t ph√π h·ª£p' :
                       totalScore > 0.5 ? 'Ph√π h·ª£p' :
                       totalScore > 0.3 ? 'C√≥ th·ªÉ ph√π h·ª£p' : '√çt ph√π h·ª£p',
        explanation: totalScore > 0.7 ? 
          'C√≥ ƒë·ªß kinh nghi·ªám v√† kh·∫£ nƒÉng ƒë·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác m·ªôt c√°ch ƒë·ªôc l·∫≠p v√† hi·ªáu qu·∫£' :
          totalScore > 0.5 ?
          'C√≥ th·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác v·ªõi s·ª± h·ªó tr·ª£ v√† gi√°m s√°t ph√π h·ª£p' :
          totalScore > 0.3 ?
          'C·∫ßn nhi·ªÅu h·ªó tr·ª£ v√† training ƒë·ªÉ ho√†n th√†nh c√¥ng vi·ªác' :
          'Kh√¥ng ph√π h·ª£p ƒë·ªÉ th·ª±c hi·ªán c√¥ng vi·ªác n√†y'
      },
      A: {
        score: Math.min(1, totalScore + 0.1), // Accountable c·∫ßn kinh nghi·ªám cao h∆°n
        recommendation: (totalScore + 0.1) > 0.7 ? 'R·∫•t ph√π h·ª£p' :
                       (totalScore + 0.1) > 0.5 ? 'Ph√π h·ª£p' :
                       (totalScore + 0.1) > 0.3 ? 'C√≥ th·ªÉ ph√π h·ª£p' : '√çt ph√π h·ª£p',
        explanation: (totalScore + 0.1) > 0.7 ?
          'C√≥ ƒë·ªß kinh nghi·ªám v√† uy t√≠n ƒë·ªÉ ch·ªãu tr√°ch nhi·ªám cu·ªëi c√πng cho k·∫øt qu·∫£ c√¥ng vi·ªác' :
          (totalScore + 0.1) > 0.5 ?
          'C√≥ th·ªÉ ch·ªãu tr√°ch nhi·ªám v·ªõi s·ª± h·ªó tr·ª£ t·ª´ c·∫•p tr√™n' :
          'C·∫ßn kinh nghi·ªám nhi·ªÅu h∆°n ƒë·ªÉ ƒë·∫£m nh·∫≠n vai tr√≤ ch·ªãu tr√°ch nhi·ªám'
      },
      C: {
        score: Math.min(1, fieldExperienceScore + 0.2), // Consulted c·∫ßn chuy√™n m√¥n cao
        recommendation: (fieldExperienceScore + 0.2) > 0.7 ? 'R·∫•t ph√π h·ª£p' :
                       (fieldExperienceScore + 0.2) > 0.5 ? 'Ph√π h·ª£p' :
                       (fieldExperienceScore + 0.2) > 0.3 ? 'C√≥ th·ªÉ ph√π h·ª£p' : '√çt ph√π h·ª£p',
        explanation: (fieldExperienceScore + 0.2) > 0.7 ?
          'C√≥ chuy√™n m√¥n s√¢u ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n v√† h∆∞·ªõng d·∫´n ch√≠nh x√°c' :
          (fieldExperienceScore + 0.2) > 0.5 ?
          'C√≥ th·ªÉ ƒë√≥ng g√≥p √Ω ki·∫øn h·ªØu √≠ch trong lƒ©nh v·ª±c chuy√™n m√¥n' :
          'C·∫ßn nhi·ªÅu kinh nghi·ªám h∆°n ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ƒë√°ng tin c·∫≠y'
      },
      I: {
        score: Math.min(1, workloadScore + 0.3), // Informed ch·ªâ c·∫ßn c√≥ th·ªùi gian
        recommendation: (workloadScore + 0.3) > 0.7 ? 'R·∫•t ph√π h·ª£p' :
                       (workloadScore + 0.3) > 0.5 ? 'Ph√π h·ª£p' :
                       (workloadScore + 0.3) > 0.3 ? 'C√≥ th·ªÉ ph√π h·ª£p' : '√çt ph√π h·ª£p',
        explanation: (workloadScore + 0.3) > 0.7 ?
          'C√≥ ƒë·ªß th·ªùi gian v√† kh·∫£ nƒÉng ƒë·ªÉ theo d√µi v√† c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô c√¥ng vi·ªác' :
          (workloadScore + 0.3) > 0.5 ?
          'C√≥ th·ªÉ theo d√µi c√¥ng vi·ªác v·ªõi t·∫ßn su·∫•t ph√π h·ª£p' :
          'C√≥ th·ªÉ qu√° b·∫≠n ƒë·ªÉ theo d√µi c√¥ng vi·ªác m·ªôt c√°ch hi·ªáu qu·∫£'
      }
    }

    return NextResponse.json({
      user: {
        id: userData.id,
        name: userData.full_name,
        position: userData.position,
        org_unit: userData.org_unit
      },
      task: {
        id: taskData.id,
        name: taskData.name
      },
      scores: {
        total_score: Math.round(totalScore * 100),
        field_experience: Math.round(fieldExperienceScore * 100),
        workload_balance: Math.round(workloadScore * 100),
        skill_coverage: Math.round(skillCoverageScore * 100),
        specialization: Math.round(specializationScore * 100)
      },
      workload: {
        current_tasks: currentWorkload,
        projects_count: projectsCount,
        level: workloadLevel
      },
      skills: skillExperiences,
      reasons: reasons,
      raci_recommendations: raciRecommendations,
      recommendation: totalScore > 0.7 ? 'R·∫•t ph√π h·ª£p' :
                     totalScore > 0.5 ? 'Ph√π h·ª£p' :
                     totalScore > 0.3 ? 'C√≥ th·ªÉ ph√π h·ª£p' : '√çt ph√π h·ª£p'
    })

  } catch (error: any) {
    console.error('Error getting assignment explanation:', error)
    return NextResponse.json(
      { error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi·∫£i th√≠ch' },
      { status: 500 }
    )
  }
}
